//==============================================================================
/**
 * File Name:   GUIUserView.java
 *
 * Written By: Elicia Pluymers
 * 2023 CS Capstone Project AiAlgorithms
 **/
//==============================================================================

package userInterface;

/*
 * Import Statements
 */
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import dataStorage.imageInterface;
import algorithmData.algorithmInterface;
import algorithmData.algorithmException;

/*
 * Class: GUIUserView
 * Package: algorithmData
 * Implements: ActionListener
 * Description: Creates user interface for running user defined algorithm and handles user 
 */
public class GUIUserView implements ActionListener
{
	/*
	 * Local Class Variables
	 */
	private JFrame programScreen;
	private JTextField iterationSelectionField;
	private JTextField speedSelectionField;
	private algorithmInterface currentAlgorithm;
	private imageInterface imageData;
	private JPanel userControls;
	private JButton step;
	private JButton run;
	
	/*
	 * Constructor
	 * 
	 * Input - imData: Image object passed from program loader
	 * Input - algorithm: String contain user selected algorithmData
	 */
	public GUIUserView(imageInterface imData, algorithmInterface algorithm)
	{
		currentAlgorithm = algorithm;
		imageData = imData;
		programScreen = new JFrame();
		JPanel imagePanel = new JPanel();
		imagePanel.setLayout(new BoxLayout(imagePanel, BoxLayout.Y_AXIS));
		imagePanel.add(imageData);
		imagePanel.setPreferredSize(new Dimension(800,800));
		//imagePanel.setVisible(true);
		
		JPanel fileOptions = new JPanel();
		fileOptions.setPreferredSize(new Dimension(1000,50));
		
		JPanel detailsView = new JPanel();
		detailsView.setLayout(new BoxLayout(detailsView, BoxLayout.X_AXIS));
		
		userControls = new JPanel();
		//userControls.setPreferredSize(new Dimension(200,600));
		userControls.setLayout(new BoxLayout(userControls, BoxLayout.Y_AXIS));
		
		JPanel fullView = new JPanel();
		fullView.setLayout(new BoxLayout(fullView, BoxLayout.PAGE_AXIS));
		
		step = new JButton("Step");
		step.setActionCommand("Step");
		step.addActionListener(this);
		
		run = new JButton("Run");
		run.setActionCommand("Run");
		run.addActionListener(this);
		
		JButton newFile = new JButton("NewFile");
		newFile.setActionCommand("NewFile");
		newFile.addActionListener(this);
		
		JLabel numIterations = new JLabel("Number of Iterations");
		iterationSelectionField = new JTextField();
		iterationSelectionField.setText("1");
		iterationSelectionField.setMaximumSize(new Dimension(200, 25));
		JLabel speedIterations = new JLabel("Iteration Speed");
		speedSelectionField = new JTextField();
		speedSelectionField.setText("5");
		speedSelectionField.setMaximumSize(new Dimension(200, 25));
		
		fileOptions.add(newFile);
		userControls.add(step);
		userControls.add(Box.createVerticalStrut(50));
		userControls.add(numIterations);
		userControls.add(iterationSelectionField);
		userControls.add(speedIterations);
		userControls.add(speedSelectionField);
		userControls.add(run);
		userControls.add(Box.createVerticalStrut(50));
		
		detailsView.add(imagePanel);
		detailsView.add(userControls);
		fullView.add(fileOptions);
		fullView.add(detailsView);
		programScreen.add(fullView);
		programScreen.setPreferredSize(new Dimension(1000,850));
		programScreen.pack();
		programScreen.setLocationRelativeTo(null);
	}
	
	/*
	 * Function: createUserViewScreen
	 * Description: Set the programScreen defined in constructor to visible
	 */
	public void createUserViewScreen()
	{
		programScreen.setVisible(true);
	}
	
	/*
	 * Function: actionPerformed
	 * Description: Handle all button events generated by Objects
	 */
	public void actionPerformed(ActionEvent e)
	{
		switch(e.getActionCommand())
		{
			case "NewFile":
				programLoader.createFileLoader();
				break;
			case "Run":
				try
				{
					algorithmIteration(Integer.parseInt(iterationSelectionField.getText()),Integer.parseInt(speedSelectionField.getText()));
				}
				catch (algorithmException e1)
				{
					programLoader.errorMessage("There was an issue with the algorithm program.\n" + e1.getMessage());
				}
				catch (InterruptedException e3)
				{
					programLoader.errorMessage("There was an issue with the algorithm program.\n" + e3.getMessage());
				}
				break;
			case "Step":
				try
				{
					algorithmIteration(1, 0);
				}
				catch (algorithmException e2)
				{
					programLoader.errorMessage("There was an issue with the algorithm program.\n" + e2.getMessage());
				}
				catch (InterruptedException e4)
				{
					programLoader.errorMessage("There was an issue with the algorithm program.\n" + e4.getMessage());
				}
				break;
			default:
				break;
		}
	}
	
	/*
	 * Function: algorithmIteration
	 * Description: Run one iteration of the chosen algorithm. Waits a user defined amount of time between each iteration for display purposes.
	 * 
	 * Input - iter: Number of chosen iterations
	 * Input - speed: Chosen delay between consecutive iterations
	 */
	private void algorithmIteration(int iter, int speed) throws InterruptedException, algorithmException{
		int i = 0;
		int solutionFound = 0;
		while(i < iter && solutionFound == 0)
		{
			solutionFound = currentAlgorithm.nextIteration();
			i++;
			imageData.repaint();
			Thread.sleep(speed*100);
		}
		if(solutionFound == -1)
		{
			JLabel failureMessage = new JLabel("<html>Algorithm failed to find solution.<br>Algorithm failed after: <br>    " + currentAlgorithm.getTotalIterations() + " total iterations.</html>");
			userControls.add(failureMessage);
			programScreen.pack();
			step.setEnabled(false);
			run.setEnabled(false);
		}
		else if(solutionFound == 1)
		{
			JLabel successMessage = new JLabel("<html>Algorithm found a solution. <br>Solution found after: <br>    " + currentAlgorithm.getTotalIterations() + " total iterations.</html>");
			userControls.add(successMessage);
			programScreen.pack();
			step.setEnabled(false);
			run.setEnabled(false);
		}
	}
}
